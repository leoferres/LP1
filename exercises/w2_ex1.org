#+title: Programming 503208: Study Guide 1
#+author: Leo Ferres
#+email: lferres@inf.udec.cl

* Introduction
As I said in class, in computer memory, everything is an integer. In
particular, the four basic C types: =char=, =int=, =float=, and
=double= are integers. The next exercise will get you acquainted on
how values are stored in memory, and later how variables are stored as
well.

* Exercises

** Convert the following values (from → to; e.g. bin → hex)

 Do not use any electronic device. Do it by hand. If you don't
 remember, go to the web and learn.

#+BEGIN_EXAMPLE
 a. 2 (dec → hex)
 b. 10 (dec → hex)
 c. 255 (dec → bin)
 d. 256 (dec → bin)
 e. 10101010 (bin → dec)
 f. 00000001 (bin → dec)
 g. 10000000 (bin → hex)
 h. DEADBEEF (hex → bin)
 i. DEAD (hex → bin)
 j. BEEF (hex → bin)
 k. 1111100011110011 (bin → dec)
 l. 65535 (dec → bin)
 m. 16 (dec → hex)
 n. 65535 (dec → hex)
 o. 16 (dec → bin)
 p. A (hex → bin)
 q. 4096 (dec → hex11 12 13 14 15
 r. 4096 (dec → bin
 s. 400 (hex → bin)
 t. 400 (hex → dec)
 u. 400 (hex → bin)
#+END_EXAMPLE

** How are the following values represented in memory?
 Now that you know how to convert from one base to another, you need
 to know how values are stored in memory. As you remember, memory is
 byte-addressable, meaning that each cell in RAM can be called with an
 address. What I didn't tell you is that, as much as it happens with
 bits, bytes also have an ordering in memory. Bytes in cells
 decreasing their memory address contribute less to the final value.
 So, if we count backwards from $2^{W}-1 to 0, then the most
 significant byte is first.

 In this exercise, you will be given a memory array A, and you will
 have to write an integer in some base B that will be given to you,
 starting at the given address. For example, if you're given =int a =
 255=; (hex), you will need to write (4 bytes because of =int=):

#+BEGIN_EXAMPLE
2^{W}-1                          a                      ...             0
|     |     |  0  |  0  |  0  | FF  |     |     |     | ... |     |     |
#+END_EXAMPLE

Write the following numbers, respecting the types, all in
hexadecimal. Notice that we have not talked about some of them in
class. All the same, try to do the exercise. Then compare your answers
online:

#+BEGIN_EXAMPLE
a. int a = 322;              f. float a= 2/0;
b. char a = -1;              g. inf (infinity, float)
c. float a = 12.87643876f;   h. char a = 'A'
d. char a = -127;            i. char a = '\0'
e. double a = 0.1;           j. char a = '0'
#+END_EXAMPLE

#+BEGIN_EXAMPLE
a.
2^{W}-1                          a                      ...             0
|     |     |     |     |     |     |     |     |     | ... |     |     |

b.
2^{W}-1                          a                      ...             0
|     |     |     |     |     |     |     |     |     | ... |     |     |

c.
2^{W}-1                          a                      ...             0
|     |     |     |     |     |     |     |     |     | ... |     |     |

d.
2^{W}-1                          a                      ...             0
|     |     |     |     |     |     |     |     |     | ... |     |     |

e.
2^{W}-1                          a                      ...             0
|     |     |     |     |     |     |     |     |     | ... |     |     |

f.
2^{W}-1                          a                      ...             0
|     |     |     |     |     |     |     |     |     | ... |     |     |

g.
2^{W}-1                          a                      ...             0
|     |     |     |     |     |     |     |     |     | ... |     |     |

h.
2^{W}-1                          a                      ...             0
|     |     |     |     |     |     |     |     |     | ... |     |     |

i.
2^{W}-1                          a                      ...             0
|     |     |     |     |     |     |     |     |     | ... |     |     |

j.
2^{W}-1                          a                      ...             0
|     |     |     |     |     |     |     |     |     | ... |     |     |
#+END_EXAMPLE

** BONUS (Code Golf, for those who know how to program already):

[[https://en.wikipedia.org/wiki/Floyd%2527s_triangle][Floyd's triangle]] is a right-angled triangular array of natural
numbers, used in computer science education. It is named after Robert
Floyd. It is defined by filling the rows of the triangle with
consecutive numbers, starting with a 1 in the top left corner. Write a
program in C that prints Floyd's triangle in as few instructions as
possible.

#+BEGIN_EXAMPLE
1
2 3
4 5 6
7 8 9 10
11 12 13 14 15
#+END_EXAMPLE
